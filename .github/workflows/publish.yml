name: Publish pipeline outputs (PR)

on:
  workflow_run:
    workflows: ["Weekly Pipeline (read-only)"]
    types: [completed]
  workflow_dispatch:
    inputs:
      branch:
        description: "Base branch"
        required: false
        default: "main"

permissions:
  actions: read
  contents: write
  pull-requests: write

jobs:
  create-pr:
    if: ${{ (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve weekly workflow ID
        id: wf
        run: |
          set -euo pipefail
          curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github+json" \
               "https://api.github.com/repos/${{ github.repository }}/actions/workflows" \
            > workflows.json
          name="Weekly Pipeline (read-only)"
          wid=$(jq -r --arg NAME "$name" '.workflows[] | select(.name==$NAME) | .id' workflows.json)
          if [ -z "$wid" ] || [ "$wid" = "null" ]; then
            file=".github/workflows/pipeline.yml"
            wid=$(jq -r --arg FILE "$file" '.workflows[] | select(.path==$FILE) | .id' workflows.json)
          fi
          test -n "$wid" && test "$wid" != "null"
          echo "workflow_id=$wid" >> "$GITHUB_OUTPUT"

      - name: Resolve run id
        id: rid
        run: |
          set -euo pipefail
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            rid="${{ github.event.workflow_run.id }}"
          else
            rid=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                       -H "Accept: application/vnd.github+json" \
                       "https://api.github.com/repos/${{ github.repository }}/actions/workflows/${{ steps.wf.outputs.workflow_id }}/runs?branch=${{ github.event.inputs.branch || 'main' }}&status=success&per_page=1" \
                    | jq -r '.workflow_runs[0].id')
            test -n "$rid" && test "$rid" != "null"
          fi
          echo "run_id=$rid" >> "$GITHUB_OUTPUT"

      - name: Download artifacts
        uses: dawidd6/action-download-artifact@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          run_id: ${{ steps.rid.outputs.run_id }}
          name: pipeline-results
          path: _results
          repo: ${{ github.repository }}

      - name: Stage results into repo working tree
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          mkdir -p data/search_cache

          echo "Copying updated meta.json to data/meta.json"
          # Find meta.json whether it's nested or not, and copy it to the correct final destination.
          meta_file=$(find _results -type f -name 'meta.json' | head -n 1)
          if [ -n "$meta_file" ]; then
            cp -f "$meta_file" data/meta.json
            echo "  -> Copied $meta_file to data/meta.json"
          else
            echo "  -> WARNING: meta.json not found in artifacts."
          fi

          echo "Copy CSVs into data/:"
          # Use a recursive glob to find CSVs at any depth
          for f in _results/**/*.csv; do
            [ -e "$f" ] || continue
            echo "  -> $f"
            cp -f "$f" data/
          done

          echo "Copy search cache JSON into data/search_cache/:"
          # Use a recursive glob to find JSON files
          for f in _results/**/*.json; do
            # Skip meta.json, as it has already been handled.
            if [[ "$(basename "$f")" == "meta.json" ]]; then continue; fi
            [ -e "$f" ] || continue
            echo "  -> $f"
            cp -f "$f" data/search_cache/
          done

          # Optional manifest-based pruning
          if [ -f _results/_manifest_cache.txt ]; then
            sort -u _results/_manifest_cache.txt > _results/_keep.txt
            for f in data/search_cache/*.json; do
              [ -e "$f" ] || continue
              base=$(basename "$f")
              if ! grep -qx "$base" _results/_keep.txt; then
                git rm -f -- "$f" || true
              fi
            done
          fi

          echo "Pending changes:"
          git status --porcelain

      - name: Cleanup temp files before PR
        run: |
          rm -rf _results workflows.json || true

      - name: Create Pull Request
        id: create_pr
        uses: peter-evans/create-pull-request@v6
        with:
          branch: bot/pipeline-results
          base: ${{ github.event.inputs.branch || 'main' }}
          title: "ðŸ“ˆ Weekly pipeline results"
          body: |
            Automated outputs from the scheduled pipeline.

            - Updated base data (prices, fundamentals, SPY)
            - Candidates & agentic CSVs
            - Search cache (synced with TTL)
          commit-message: "chore: weekly pipeline outputs (data refresh + CSVs + cache sync)"
          add-paths: |
            data
          delete-branch: true

      - name: PR info
        run: |
          echo "PR number: ${{ steps.create_pr.outputs.pull-request-number || 'none' }}"
          echo "PR URL   : ${{ steps.create_pr.outputs.pull-request-url || 'none' }}"

name: Publish pipeline outputs (PR)

on:
  workflow_run:
    workflows: ["Weekly Pipeline (read-only)"]
    types: [completed]
  workflow_dispatch:
    inputs:
      run_id:
        description: "Optional: Weekly Pipeline run_id to fetch artifacts from"
        required: false
      branch:
        description: "Base branch for PR"
        required: false
        default: "main"

permissions:
  actions: read
  contents: write
  pull-requests: write

jobs:
  create-pr:
    if: ${{ (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Resolve the workflow ID of the weekly pipeline (by name OR by filename)
      - name: Resolve weekly workflow ID
        id: wf
        run: |
          set -euo pipefail
          echo "Listing workflows in ${{ github.repository }}..."
          curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github+json" \
               "https://api.github.com/repos/${{ github.repository }}/actions/workflows" \
            > workflows.json

          # Try to match by name first (exact match). Change this string if your weekly workflow name differs.
          name="Weekly Pipeline (read-only)"
          id=$(jq -r --arg NAME "$name" '.workflows[] | select(.name==$NAME) | .id' workflows.json)

          # If not found by name, try by filename (set this to your actual YAML file path)
          if [ -z "$id" ] || [ "$id" = "null" ]; then
            file=".github/workflows/weekly-pipeline.yml"   # <-- change if your file has a different path
            id=$(jq -r --arg FILE "$file" '.workflows[] | select(.path==$FILE) | .id' workflows.json)
          fi

          if [ -z "$id" ] || [ "$id" = "null" ]; then
            echo "Could not resolve workflow ID by name or file. Available workflows:"
            jq -r '.workflows[] | "\(.id)  \(.name)  \(.path)"' workflows.json
            exit 1
          fi

          echo "Resolved workflow id: $id"
          echo "workflow_id=$id" >> "$GITHUB_OUTPUT"

      # If triggered by workflow_run, download that run's artifact
      - name: Download artifacts from triggering run
        if: ${{ github.event_name == 'workflow_run' }}
        uses: dawidd6/action-download-artifact@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          run_id: ${{ github.event.workflow_run.id }}
          name: pipeline-results
          path: _results
          repo: ${{ github.repository }}

      # Manual w/ explicit run_id input
      - name: Download artifacts by run_id (manual)
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.run_id != '' }}
        uses: dawidd6/action-download-artifact@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          run_id: ${{ github.event.inputs.run_id }}
          name: pipeline-results
          path: _results
          repo: ${{ github.repository }}

      # Manual w/o run_id: download latest successful run on main for the resolved workflow_id
      - name: Download artifacts from latest successful Weekly Pipeline on main
        if: ${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.run_id == '' || github.event.inputs.run_id == null) }}
        uses: dawidd6/action-download-artifact@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: ${{ steps.wf.outputs.workflow_id }}   # use numeric ID to avoid name mismatch
          branch: main
          workflow_conclusion: success
          name: pipeline-results
          path: _results
          repo: ${{ github.repository }}

      - name: Show downloaded artifact contents (debug)
        run: |
          echo "Downloaded files:"
          ls -R _results || (echo "No files found in _results"; exit 1)

      - name: Stage results into repo working tree
        run: |
          set -euxo pipefail
          mkdir -p data/search_cache
          shopt -s nullglob

          # CSVs
          cp -f _results/*.csv data/ 2>/dev/null || true

          # Cache JSONs + manifest-based deletion
          cp -f _results/*.json data/search_cache/ 2>/dev/null || true
          if [ -f _results/_manifest_cache.txt ]; then
            sort -u _results/_manifest_cache.txt > _results/_keep.txt
            for f in data/search_cache/*.json; do
              [ -e "$f" ] || continue
              base=$(basename "$f")
              if ! grep -qx "$base" _results/_keep.txt; then
                git rm -f -- "$f" || true
              fi
            done
          fi

      - name: Cleanup temp files before PR
        run: |
          rm -rf _results workflows.json || true

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          branch: bot/pipeline-results
          base: ${{ github.event.inputs.branch || 'main' }}
          title: "ðŸ“ˆ Weekly pipeline results"
          body: |
            Automated outputs from the scheduled pipeline.

            - Updated base data (prices, fundamentals, SPY)
            - Candidates & agentic CSVs
            - Search cache (synced with TTL)
          commit-message: "chore: weekly pipeline outputs (data refresh + CSVs + cache sync)"
          add-paths: |
            data
          delete-branch: true
